{"version":3,"file":"inspect.js","sources":["effector/inspect.ts"],"sourcesContent":["import {\n  Scope,\n  Subscription,\n  Stack,\n  Node,\n  // private\n  // @ts-expect-error\n  setInspector,\n  // private\n  // @ts-expect-error\n  setGraphInspector,\n} from 'effector'\nimport { ID } from './index.h'\n\ntype Loc = {\n  file: string\n  line: number\n  column: number\n}\n\ntype NodeCommonMeta = {\n  kind: string\n  sid?: string\n  id: string\n  name?: string\n  loc?: Loc\n  meta: Record<string, unknown>\n  derived?: boolean\n}\n\n// Watch calculations\ntype Message = {\n  type: 'update' | 'error'\n  error?: unknown\n  value: unknown\n  stack: Record<string, unknown>\n  trace?: Message[]\n} & NodeCommonMeta\n\nconst inspectSubs = new Set<{\n  scope?: Scope\n  trace?: boolean\n  fn: (message: Message) => void\n}>()\n\nsetInspector((stack: Stack, local: {fail: boolean; failReason?: unknown}) => {\n  const {scope} = stack\n  const nodeMeta = getNodeMeta(stack)\n  let trace: Message[]\n  inspectSubs.forEach(config => {\n    if (\n      !(\n        // must be the same scope\n        (\n          config.scope === scope ||\n          // or no scope at all\n          (!config.scope && !scope)\n        )\n      )\n    ) {\n      /**\n       * Inspection is restriced by scope\n       */\n      return\n    }\n\n    if (config.trace && !trace) {\n      trace = collectMessageTrace(stack)\n    }\n\n    config.fn({\n      type: local.fail ? 'error' : 'update',\n      value: stack.value,\n      error: local.fail ? local.failReason : undefined,\n      stack: stack.meta || {},\n      trace: config.trace ? trace : [],\n      meta: nodeMeta.meta,\n      id: nodeMeta.id,\n      sid: nodeMeta.sid,\n      name: nodeMeta.name,\n      kind: nodeMeta.kind,\n      loc: nodeMeta.loc,\n      derived: nodeMeta.derived,\n    })\n  })\n})\n\nexport function inspect(config: {\n  scope?: Scope\n  trace?: boolean\n  fn: (message: Message) => void\n}): Subscription {\n  inspectSubs.add(config)\n\n  return createSubscription(() => {\n    inspectSubs.delete(config)\n  })\n}\n\n// Track declarations and graph structure\ntype Region =\n  | {\n      type: 'region'\n      id: ID,\n      meta: Record<string, unknown>\n      region?: Region\n    }\n  | {\n      type: 'factory'\n      id: ID,\n      meta: Record<string, unknown>\n      region?: Region\n      sid?: string\n      name?: string\n      method?: string\n      loc?: {\n        file: string\n        line: number\n        column: number\n      }\n    }\n\ntype UnitDeclaration = {\n  type: 'unit'\n  meta: Record<string, unknown>\n  region?: Region\n} & NodeCommonMeta\n\ntype Declaration = UnitDeclaration | Region\n\nconst inspectGraphSubs = new Set<{\n  fn: (declaration: Declaration) => void\n}>()\n\nsetGraphInspector((node: Node | 'region', regionStack: RegionStack) => {\n  let decl: Declaration | undefined\n\n  if (node === 'region') {\n    decl = readRegionStack(regionStack)\n  } else {\n    decl = readUnitDeclaration(node, regionStack)\n  }\n\n  if (decl) {\n    inspectGraphSubs.forEach(sub => {\n      sub.fn(decl!)\n    })\n  }\n})\n\nexport function inspectGraph(config: {\n  fn: (declaration: Declaration) => void\n}): Subscription {\n  inspectGraphSubs.add(config)\n  return createSubscription(() => {\n    inspectGraphSubs.delete(config)\n  })\n}\n\n// Utils\nfunction createSubscription(cleanup: () => void): Subscription {\n  const result = () => cleanup()\n  result.unsubscribe = result\n  return result\n}\n\nfunction getNodeMeta(stack: Stack) {\n  return readNodeMeta(stack.node)\n}\n\nfunction readNodeMeta(node: Node): NodeCommonMeta {\n  const {meta, id} = node\n  const loc = getLoc(meta)\n  const {sid, name, op: kind} = meta\n\n  return {meta, id, sid, name, kind, loc, derived: meta.derived}\n}\n\nfunction getLoc(meta: Record<string, unknown>) {\n  return meta.config ? (meta.config as any).loc : meta.loc\n}\n\nfunction collectMessageTrace(stack: Stack) {\n  const trace: Message[] = []\n  let currentStack = stack.parent\n\n  while (currentStack) {\n    const nodeMeta = getNodeMeta(currentStack)\n    trace.push({\n      type: 'update',\n      value: currentStack.value,\n      stack: currentStack.meta || {},\n      meta: nodeMeta.meta,\n      id: nodeMeta.id,\n      sid: nodeMeta.sid,\n      name: nodeMeta.name,\n      kind: nodeMeta.kind,\n      loc: nodeMeta.loc,\n      derived: nodeMeta.derived,\n    })\n\n    currentStack = currentStack.parent\n  }\n\n  return trace\n}\n\nfunction readUnitDeclaration(\n  node: Node,\n  regionStack: RegionStack,\n): UnitDeclaration {\n  const nodeMeta = readNodeMeta(node)\n\n  return {\n    type: 'unit',\n    region: readRegionStack(regionStack),\n    meta: nodeMeta.meta,\n    id: nodeMeta.id,\n    sid: nodeMeta.sid,\n    name: nodeMeta.name,\n    kind: nodeMeta.kind,\n    loc: nodeMeta.loc,\n    derived: nodeMeta.derived,\n  }\n}\n\nfunction readRegionStack(regionStack?: RegionStack | null): Region | undefined {\n  if (!regionStack) return\n  const {parent, meta, id} = regionStack\n  const parentRegion = readRegionStack(parent) || undefined\n\n  if (meta.type === 'factory') {\n    const {sid, name, loc, method} = meta as any\n\n    return {\n      type: 'factory',\n      id,\n      region: parentRegion,\n      meta,\n      sid,\n      name,\n      loc,\n      method,\n    }\n  }\n\n  return {\n    type: 'region',\n    id,\n    region: parentRegion,\n    meta,\n  }\n}\n\ntype RegionStack = {\n  id: ID,\n  parent: RegionStack | null\n  meta:\n    | Record<string, unknown>\n    | {\n        type: 'factory'\n        sid?: string\n        name?: string\n        method?: string\n        loc?: Loc\n      }\n}\n"],"names":["createSubscription","cleanup","result","unsubscribe","getNodeMeta","stack","readNodeMeta","node","meta","id","loc","config","getLoc","sid","name","op","kind","derived","readRegionStack","regionStack","parent","parentRegion","undefined","type","method","region","inspectSubs","Set","setInspector","local","scope","nodeMeta","trace","forEach","currentStack","push","value","collectMessageTrace","fn","fail","error","failReason","inspectGraphSubs","setGraphInspector","decl","readUnitDeclaration","sub","add","delete"],"mappings":"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"}